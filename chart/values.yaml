###############################################################################
## Global Values                                                             ##
###############################################################################

global:
  awsRegion: us-east-1
  appName: gamechanger
  # main domain for the application dev.advana.us for dev tests.advana.us for test
  baseDomain: "dev.advana.us" # advana.example.local
  registry: docker.io
  imagePullSecrets: {}

# DEFAULT VALUES
vaultKey: kv/aws-us-gov/default/prod

# scripts - <Object>
#   BASH scripts that run during various points in the deployment
scripts:
  # Init Job - job that must run successfully before every application pod is started (e.g. more replicas, more time this runs)
  #     Params:
  #       runInitJob - <bool> - whether the job should run at all
  #       initJobScript - <string> - Inline BASH script
  runInitJob: false
  initJobScript: |
    echo "Hello from Init Script"
    echo "This script must run to completion before EACH application pod starts"
    echo "Can be disabled at will by setting scripts.runInitJob=false"
  # One Time Job - job that runs once for the entire deployment
  #     Params:
  #       runOneTimeJob - <bool> - whether the job should run at all
  #       oneTimeJobScript - <string> - Inline BASH script
  runOneTimeJob: false
  oneTimeJobScript: |
    echo "Hello from one-time Job"
    echo "This job runs every time helm upgrade/install runs, unless explicitly disabled"
    echo "Can be disabled at will by setting scripts.runOneTimeJob=false"

# image - <Object>
#   Main app image details - also used to run all jobs defined in .Values.scripts
image:
  registry: 092912502985.dkr.ecr.us-east-1.amazonaws.com
  repository: advana/gamechanger/gamechanger-web
  pullPolicy: Always
  tag: "latest"

# nameOverride - <string>
#   Overrides chart name used for purposes of rendering certain templates.
#   Has no effect on helm-provided .Chart.Name variable.
nameOverride: ""
# fullNameOVerride - <string>
#   Overrides the full name of deployment (typically used as unique resource name or prefix for one).
#   Has no effect on helm-provided .Chart.Name variable.
fullnameOverride: ""

# deployment - <Array>
#   Sets all configuration for the deployment resource yaml.
#
# TODO: done, tplify secret name for envFrom
deployment:
  web:
    autoscaling:
      enabled: false
    # replicaCount - <Integer >= 1>
    #   Number of app pod replicas to launch in the load-balancing group.
    #
    #   Tips:
    #   - when troubleshooting, set to 1 to avoid dealing with complications of load-balanced traffic
    replicaCount: 1
    # podAnnotations - <Object>  additional pod annotations
    podAnnotations:
      checksum/env-config-secret: 2660c5692715b67c1b913eda4cc32d3f5df69736a1dca4b92a9aa1fb0f2f10a0
      checksum/file-config-secret: a65095aa0d9e48d2e2280cfbd183ac6c1695ade9d5b6c6ad126c75f1815afc33
      iam.amazonaws.com/role: advana/k8s/s3.wildcard
    serviceAccountName: "{{ .Release.Name}}-gamechanger-web"
    initContainer: {}
    container:
      gamechanger-web:
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 1001
          runAsUser: 1001
        # startCommand - <Array of strings>
        #   Entrypoint/command to be executed by the main application pod.
        #   Will completely override any entrypoint/cmd baked into the container.
        #
        #   Tips:
        #     - when troubleshooting, set to ["sleep", "infinity"] then exec into container and tweak/relaunch app as necessary
        command:
          - "node"
          - "index.js"
        envFrom:
          - secretRef: # TODO: done, need to make mr to template
              name: '{{ .Release.Name | trunc 63 | trimSuffix "-" }}-{{ .Chart.Name }}.env-config-secret'
        env:
          REACT_APP_VERSION: '{{ default "1.0.0" .Chart.AppVersion }}'
        resources:
          requests:
            cpu: "1"
            memory: 512Mi

        # probes - <Object>
        #   Probes for determining pod/container health, as per ...
        #   https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
        #
        #   Tips:
        #     - if troubleshooting, set to empty object {}; to avoid k8s restarting container and blocking traffic to it
        livenessProbe:
          httpGet:
            path: /health
            port: 8443
            scheme: HTTPS
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8443
            scheme: HTTPS
          timeoutSeconds: 10
    # service - <Object/Map>
    #   Port details of the service used to open application pod to connections from outside.
    #   Note: must be of type NodePort and only http/https keys are supported.
    #   Only define service in the dev/test values. Advana-library chart will create another service if a different type is set in the default values.yaml
    #   For syntax, refer to service.spec.ports[*] definitions of the NodePort service https://kubernetes.io/docs/concepts/services-networking/service/#nodeport
    # service:
    #   # Change this key between ClusterIP to NodePort as needed, making sure to comment out nodePort keys when using clusterIP.
    #   ClusterIP: #NodePort:
    #     ports:
    #       http:
    #         port: 80
    #         protocol: TCP
    #         targetPort: 8990
    #         # nodePort: 31007
    #       https:
    #         port: 443
    #         protocol: TCP
    #         targetPort: 8443
    #         # nodePort: 31207

# podSecurityContext - <Map>
#   Security context for app and job containers.
#   It's useful to define this to match user-id and group-id of the application and its' files inside container
#   For more on what goes in here, reference https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
podSecurityContext:
  runAsUser: 1001
  runAsGroup: 1001
  # allowPrivilegeEscalation: false

# serviceAccount - <Map>
#   Config of service account to be used by the app and job pods
#   Service account determines what permissions pods/resources have when they interact with other k8s resources & API's
serviceAccount:
  # create - <bool> - whether to attempt creating the service account
  create: true
  # name - <string> - override with custom name. useful if there is a pre-existing service account you should be using
  name: "{{ .Release.Name }}-gamechanger-web"

ingress:
  enabled: false
  tls: true
  className: nginx # set if default IngressClass is not configured
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/server-snippet: |
      underscores_in_headers on;
  domain: "{{ $.Values.global.appName }}.{{ $.Values.global.baseDomain }}"
  # hosts:
  #   "{{ $.Values.ingress.domain }}":
  #     paths:
  #       - path: /
  #         pathType: Prefix
  #         deploymentName: web-deployment
  #         serviceType: Nodeport
  #         serviceName: https

###############################################################################
## Environment Specific Secret Values                                        ##
###############################################################################

secret:
  ingress:
    tls:
      "{{ $.Values.ingress.domain }}":
        # reference existing tls secret
        secretName: advana.us-wildcard-tls
        # or define new tls secret
        # tls.crt: |
        #   -----BEGIN CERTIFICATE-----
        #   tls-crt
        #   -----END CERTIFICATE-----
        # tls.key: |
        #   -----BEGIN RSA PRIVATE KEY-----
        #   tls-key
        #   -----END RSA PRIVATE KEY-----

  # public values that are stored as a secret object for convenience, remove if using values from vault
  # put values from values.env here
  env:
    # secret - <Map[string, string]>
    #   Map of environment variables to be defined for all containers (app & jobs)
    #   Keys correspond to env-var names (capitalization is important) and values are interpreted as strings
    secret:
      '{{ include "chart.envConfigSecretName" . }}': # TODO: done, how to use templated key as secret name

secretstore:
  "vault":
    kind: ClusterSecretStore
    externalsecret:
      '{{ include "chart.envConfigSecretNameVault" . }}': # TODO: done, make MR to externalsecret template to tplify name
        data:
          - secretKey: TLS_KEY
            remoteRef:
              key: '{{ include "chart.vaultCertsKey" . }}'
              property: key
          - secretKey: TLS_CERT
            remoteRef:
              key: '{{ include "chart.vaultCertsKey" . }}'
              property: cert
          - secretKey: TLS_CA
            remoteRef:
              key: '{{ include "chart.vaultCertsKey" . }}'
              property: ca
          - secretKey: TLS_KEY_PASSPHRASE
            remoteRef:
              key: '{{ include "chart.vaultCertsKey" . }}'
              property: passphrase

# job - <Map>
#
#
job:
  '{{ include "chart.oneTimeJobName" . }}':
    podAnnotations:
      checksum/secrets: '{{ include (print .Template.BasePath "/secrets.yaml") . | sha256sum }}'
    restartPolicy: Never
    container:
      "init-scripts":
        command: ["/bin/bash", "-c"]
        args:
          - |
            {{- .Values.scripts.oneTimeJobScript | trim | nindent 16 }}
        env:
          REACT_APP_VERSION: '{{ default "1.0.0" .Chart.AppVersion }}'
        envFrom:
          - secretRef:
              name: '{{ include "chart.envConfigSecretName" . }}'

# volume - <Map>
# Configure which resources to attach to all pods as a volume
volume:
  secret:
    file-config-vol:
      secretName: '{{ include "chart.fileConfigSecretName" . }}'
      volumeMount:
        mountPath: /opt/app-root/src/secrets/
        readOnly: true
