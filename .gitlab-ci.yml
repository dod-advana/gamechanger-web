stages:          # List of stages for jobs, and their order of execution.
  - static-test
  - security-test
  - integration-test
  - deploy

.setup-github-npm:
  before_script:   # Setups the npm vars
    - npm set "@dod-advana:registry" "https://npm.pkg.github.com"
    - npm set "//npm.pkg.github.com/:_authToken" "${NPM_AUTH_TOKEN}"

unit-backend-test-job:    # Job for the unit tests
  image: node:14
  stage: static-test
  extends: .setup-github-npm
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $DAILY_SCAN == "true"
  cache:
    key:
      files:
        - backend/package-lock.json
    paths:
      - backend/node_modules
      - .npm/
  script:
    - cd backend && npm ci
    - npm run test:gitlab
  artifacts:
    paths:
      - backend/coverage/lcov.info
      - backend/junit.xml
    when: always
    reports:
      junit:
        - backend/junit.xml
      cobertura: backend/coverage/cobertura-coverage.xml

lint-frontend-test-job:  # front end lint job
  image: node:14
  stage: static-test
  extends: .setup-github-npm
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $DAILY_SCAN == "true"
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/node_modules
      - .npm/
  script:
    - cd frontend && npm ci
    - npx eslint --max-warnings 0 -c .eslintrc.json --ext .js -f json -o eslintReport.json src
  artifacts:
    paths:
      - frontend/eslintReport.json

lint-backend-test-job:  # backend lint job
  image: node:14
  stage: static-test
  extends: .setup-github-npm
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $DAILY_SCAN == "true"
  cache:
    key:
      files:
        - backend/package-lock.json
    paths:
      - backend/node_modules
      - .npm/
  script:
    - cd backend && npm ci
    - npx eslint --max-warnings 0 -c .eslintrc.json --ext .js -f json -o eslintReport.json node_app
  artifacts:
    paths:
      - backend/eslintReport.json

sonar_scan-job:  # Run code through sonar scanner
  stage: security-test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $DAILY_SCAN == "true"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  artifacts:
    paths:
      - "public"
  variables:
    REPOSITORY: "${CI_PROJECT_PATH}"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    SONAR_HOST_EXTERNAL_URL: "${SONAR_HOST_EXTERNAL_URL}"
    SONAR_HOST_URL: "${SONAR_HOST_URL}"
    SONAR_TOKEN: "${SONAR_TOKEN}"
    PROJECTURL: "${CI_REPOSITORY_URL}"
    PROJECTNAME: "advana/gamechanger/gamechanger-web-source"
    PROJECTKEY: "${SONAR_PROJECT_KEY}"
    CODEQUALITY_REPORT_ARTIFACT: "sonarqube-report.html"
    GIT_DEPTH: "0"
  script:
    - |
      sonar-scanner \
        -Dsonar.qualitygate.wait=true \
        -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info \
        -Dsonar.junit.reportPaths=backend/junit.xml \
        -Dsonar.eslint.reportPaths=backend/eslintReport.json,frontend/eslintReport.json \
        -Dsonar.language=js \
        -Dsonar.exclusions=backend/node_app/sql/* \
        -Dsonar.projectName="${PROJECTNAME}" \
        -Dsonar.projectKey="${PROJECTKEY}" \
        -Dsonar.links.ci="${PROJECTURL}/pipelines" \
        -Dsonar.links.issue="${PROJECTURL}/issues" \
        -Dsonar.analysis.mode="publish" \
        -Dsonar.projectBaseDir=. \
        -Dsonar.sources=frontend/src,backend/node_app
      mkdir -p public
      <<-EOF cat > "public/${CODEQUALITY_REPORT_ARTIFACT}"
      <html>
      <head>
      <meta http-equiv="refresh" content="0; url=${SONAR_HOST_EXTERNAL_URL}/dashboard?id=${PROJECTKEY}" />
      </head>
      </html>
      EOF

cypress-testing-job:
  image: cypress/browsers:node14.19.0-chrome100-ff99-edge
  stage: static-test
  extends: .setup-github-npm
  cache:
    key:
      files:
        - frontend/package-lock.json
        - backend/package-lock.json
    paths:
      - frontend/node_modules
      - backend/node_modules
      - .npm/
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $DAILY_SCAN == "true"
  variables:
    CYPRESS_BASE_URL: "http://localhost:8990"
    CYPRESS_API_URL: "http://localhost:8990"
    CYPRESS_SSL_CLIENT_S_DN_CN: "${CYPRESS_SSL_CLIENT_S_DN_CN}"
    CYPRESS_SSL_CLIENT_CERTIFICATE: "${CYPRESS_SSL_CLIENT_CERTIFICATE}"
  before_script:
    - |
      npm set "@dod-advana:registry" "https://npm.pkg.github.com"
      npm set "//npm.pkg.github.com/:_authToken" "${NPM_AUTH_TOKEN}"
      npm install pm2 -g
      cd frontend && npm ci && npm run build
      mv ./build ../backend
      cd ../backend && npm ci
      echo "${BACKEND_ENV}" | tr -d '\r' > ./.env
      cd ../
  script:
    - |
      cd backend && pm2 start index.js --name backend -o out.log -e err.log
      (tail -f -n0 out.log & ) | grep -q "info ---> Process"
      cd ../frontend && npm run cy:test
  after_script:
    - |
      echo "Cypress tests finished"
      pm2 stop backend
      pm2 delete backend
      npm run report:merge
      npm run report:send
  artifacts:
    paths:
      - "frontend/results.json"
      - "frontend/cypress/screenshots"
      - "frontend/cypress/videos"

deploy-job:       # This job runs the build for dev.
  stage: deploy
  rules:
      - if: ($CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main") && $DAILY_SCAN == "true"
      - if: $DO_DEPLOY == "true"
  variables:
    BRANCH_TO_BUILD: "${CI_COMMIT_BRANCH}"
    CI_COMMIT_SHA: "${CI_COMMIT_SHA}"
  trigger: "advana/gamechanger/gamechanger-web"