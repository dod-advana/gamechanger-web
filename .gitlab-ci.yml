include:
  - template: Security/SAST.gitlab-ci.yml
  - project: platform/promotion
    file: "ci/container.yml"
  - project: platform/promotion
    file: "ci/helm.yml"

stages:          # List of stages for jobs, and their order of execution.
  - "ðŸš§ build-chart"
  - "ðŸš§ override-chart dev"
  - "ðŸš§ override-chart test"
  - "ðŸš€ deploy"
  - "ðŸ“¡ prepare"
  - "ðŸ§ª static-test"
  - "ðŸ§ª security-test"
  - "ðŸ§ª integration-test"

variables:
  UPSTREAM_KANIKO: "true"
 # UPSTREAM_REPOSITORY_URL: "https://${GITLAB_TOKEN}@gitlab.advana.boozallencsn.com/advana/gamechanger/gamechanger-web-source.git"
  UPSTREAM_COMMIT_BRANCH: ${CI_COMMIT_BRANCH}
  HELM_CHART_DIR: "./chart"
  HELM_RELEASE_NAME: "gamechanger-web"
  DOCKERFILE_PATH: "./Dockerfile.prod"
  HELM_UPGRADE_EXTRA_ARGS: >-
    --set image.tag=${CI_COMMIT_SHA}-oci
    --set appVersion=${BUILD_VERSION}
  AUTO_DEVOPS_BUILD_IMAGE_EXTRA_ARGS: >-
    --build-arg=BASE_IMAGE=${IRONBANK_NODEJS}
    --build-arg=NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    --build-arg=APP_UID=1001
    --build-arg=APP_GID=1001

cache: &global_cache
  untracked: true
  key:
    files:
      - backend/yarn.lock
      - frontend/yarn.lock
  paths:
    - frontend/node_modules
    - backend/node_modules
    - .yarn-cache
  policy: pull

.setup-github-npm:
  before_script:   # Setups the npm vars
    - npm set "@dod-advana:registry" "https://npm.pkg.github.com"
    - npm set "//npm.pkg.github.com/:_authToken" "${NPM_AUTH_TOKEN}"

prepare-node-modules-job: # Prepares the frontend node modules for the next jobs
  image: node:14
  stage: "ðŸ“¡ prepare"
  cache:
    <<: *global_cache
    policy: pull-push
  extends: .setup-github-npm
  rules:
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - |
      if [[ -d frontend/node_modules ]]; then
        exit 0
      fi
    - cd frontend
    - echo 'yarn-offline-mirror "../.yarn-cache/"' >> .yarnrc
    - echo 'yarn-offline-mirror-pruning true' >> .yarnrc
    - yarn install --cache-folder ../.yarn-cache --frozen-lockfile --no-progress
    - cd ../backend
    - echo 'yarn-offline-mirror "../.yarn-cache/"' >> .yarnrc
    - echo 'yarn-offline-mirror-pruning true' >> .yarnrc
    - yarn install --cache-folder ../.yarn-cache --frozen-lockfile --no-progress

sast:
  stage: "ðŸ§ª static-test"
  cache: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - echo "This works"

eslint-sast:
  stage: "ðŸ§ª static-test"
  cache: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

nodejs-scan-sast:
  stage: "ðŸ§ª static-test"
  cache: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

semgrep-sast:
  stage: "ðŸ§ª static-test"
  cache: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"


unit-backend-test-job:    # Job for the unit tests
  image: node:14
  stage: "ðŸ§ª static-test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - cd backend && npm run test:gitlab
  artifacts:
    paths:
      - backend/coverage/lcov.info
      - backend/junit.xml
    when: always
    reports:
      junit:
        - backend/junit.xml
      coverage_report: 
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml

lint-test-job:  # lint-job
  image: node:14
  stage: "ðŸ§ª static-test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - cd backend && npx eslint --max-warnings 0 -c .eslintrc.json --ext .js -f json -o eslintReport.json node_app
    - cd ../frontend && npx eslint --max-warnings 0 -c .eslintrc.json --ext .js -f json -o eslintReport.json src
  artifacts:
    paths:
      - backend/eslintReport.json
      - frontend/eslintReport.json

sonar_scan-job:  # Run code through sonar scanner
  stage: "ðŸ§ª security-test"
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  artifacts:
    paths:
      - "public"
  variables:
    REPOSITORY: "${CI_PROJECT_PATH}"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    SONAR_HOST_EXTERNAL_URL: "${SONAR_HOST_EXTERNAL_URL}"
    SONAR_HOST_URL: "${SONAR_HOST_URL}"
    SONAR_TOKEN: "${SONAR_TOKEN}"
    PROJECTURL: "${CI_REPOSITORY_URL}"
    PROJECTNAME: "advana/gamechanger/gamechanger-web-source"
    PROJECTKEY: "${SONAR_PROJECT_KEY}"
    CODEQUALITY_REPORT_ARTIFACT: "sonarqube-report.html"
    GIT_DEPTH: "0"
  script:
    - |
      sonar-scanner \
        -Dsonar.qualitygate.wait=true \
        -Dsonar.exclusions=backend/node_app/sql/* \
        -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info \
        -Dsonar.junit.reportPaths=backend/junit.xml \
        -Dsonar.eslint.reportPaths=backend/eslintReport.json,frontend/eslintReport.json \
        -Dsonar.language=js \
        -Dsonar.projectName="${PROJECTNAME}" \
        -Dsonar.projectKey="${PROJECTKEY}" \
        -Dsonar.links.ci="${PROJECTURL}/pipelines" \
        -Dsonar.links.issue="${PROJECTURL}/issues" \
        -Dsonar.analysis.mode="publish" \
        -Dsonar.projectBaseDir=. \
        -Dsonar.sources=frontend/src,backend/node_app
      mkdir -p public
      <<-EOF cat > "public/${CODEQUALITY_REPORT_ARTIFACT}"
      <html>
      <head>
      <meta http-equiv="refresh" content="0; url=${SONAR_HOST_EXTERNAL_URL}/dashboard?id=${PROJECTKEY}" />
      </head>
      </html>
      EOF


chart-publish:
  cache: []
  stage: "ðŸš§ build-chart"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
  extends: ".helm-publish"
  variables:
    CHART: "${PLATFORM_PROMOTION_CHART}"
  script:
    - 'cd "${HELM_CHART_DIR}"'
    - 'eval eval CHART="${CHART}"'
    - "helm dependency update ."
    - 'helm chart save . "${CHART}"'
    - 'helm chart push "${CHART}"'

dev-overrides:
  cache: []
  stage: "ðŸš§ override-chart dev"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        VALUES_FILE: "ingress.dev.values.yaml"
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        VALUES_FILE: "dev.values.yaml"
  extends:
    - ".helm-overrides"
  script:
    - |
      git clone https://dev:${GITLAB_TOKEN}@gitlab.advana.boozallencsn.com/advana/gamechanger/gamechanger-ci-cd.git
      mv gamechanger-ci-cd/${VALUES_FILE} "${HELM_UPGRADE_VALUES_FILE}"
      rm -rf gamechanger-ci-cd


test-overrides:
  cache: []
  stage: "ðŸš§ override-chart test"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        VALUES_FILE: "test.values.yaml"
  extends:
    - ".helm-overrides"
  script:
    - |
      git clone https://dev:${GITLAB_TOKEN}@gitlab.advana.boozallencsn.com/advana/gamechanger/gamechanger-ci-cd.git
      mv gamechanger-ci-cd/${VALUES_FILE} "${HELM_UPGRADE_VALUES_FILE}"
      rm -rf gamechanger-ci-cd

trigger:
  stage: "ðŸš€ deploy"
  rules:
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        variables:
          UPSTREAM_COMMIT_BRANCH: ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
          ENVIRONMENT: "gc-dev"
          HELM_RELEASE_NAME: "${GITLAB_USER_LOGIN}"
          KUBE_NAMESPACE: "${HELM_RELEASE_NAME}"
          DEV_URL: "https://${HELM_RELEASE_NAME}.gc.dev.advana.us"
          HELM_UPGRADE_EXTRA_ARGS: >-
            --set image.tag=${CI_COMMIT_SHA}-oci
            --set appVersion=${BUILD_VERSION}
            --set ingress.enabled=true
            --set ingress.web.hostname=${HELM_RELEASE_NAME}
            --set env.REACT_APP_BACKEND_URL=${DEV_URL}
            --set env.REACT_APP_USER_TOKEN_ENDPOINT=${DEV_URL}/api/auth/token
            --set env.REACT_APP_LOGIN_ROUTE=${DEV_URL}/login
            --set env.APPROVED_API_CALLERS=(${DEV_URL})
      - if: $CI_COMMIT_BRANCH == "main"
  trigger:
    strategy: "depend"
    project: "platform/promotion"
    branch: "getting-other-clusters-to-work"

integration-testing-cypress-job:  # Start the integration testing
  image: cypress/browsers:node14.19.0-chrome100-ff99-edge
  stage: "ðŸ§ª integration-test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    HELM_RELEASE_NAME: "${GITLAB_USER_LOGIN}"
    DEV_URL: "https://${HELM_RELEASE_NAME}.gc.dev.advana.us"
    CYPRESS_BASE_URL: "${DEV_URL}"
    CYPRESS_API_URL: "${DEV_URL}"
    CYPRESS_SSL_CLIENT_S_DN_CN: "${CYPRESS_SSL_CLIENT_S_DN_CN}"
    CYPRESS_SSL_CLIENT_CERTIFICATE: "${CYPRESS_SSL_CLIENT_CERTIFICATE}"
  script:
    - curl ${CYPRESS_BASE_URL}
    - cd frontend
    - echo 'yarn-offline-mirror "../.yarn-cache/"' >> .yarnrc
    - echo 'yarn-offline-mirror-pruning true' >> .yarnrc
    - yarn add --cache-folder ../.yarn-cache cypress
    - yarn cy:test
  after_script:
    - |
      echo "Cypress tests finished"
      cd frontend
      yarn report:merge
      yarn report:send
  artifacts:
    when: always
    expire_in: 1 days
    paths:
      - frontend/results.json
      - frontend/cypress/screenshots
      - frontend/cypress/videos
  allow_failure: true


