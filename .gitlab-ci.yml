default:
  image: 092912502985.dkr.ecr.us-east-1.amazonaws.com/platform/oci/super-deployer:kaniko-700872863f1e73cd6905d779a3e1b822c1f85616
variables:
  CI_REGISTRY:
    value: "092912502985.dkr.ecr.us-east-1.amazonaws.com"
    description: "OCI registry for image in ECR"
  CI_PROJECT_PATH:
    value: ""
    description: "Repository path"
  BUILD_IMAGE_PATH:
    value: ""
    description: "Specify a dockerfile to build, defaults to all if left empty."
  CLEANUP_PIPELINE_RUN:
    value: "true"
    description: "Set to false to keep pipeline output in Tketon"
stages:
  - build
  - pipeline-trigger

parent-image-build:
  environment:
    name: vdms
  stage: build
  script:
    - |
      genchildpipeline() {
          <<-EOF cat | tee -a child-pipeline-gitlab-ci.yml
            default:
              image: 092912502985.dkr.ecr.us-east-1.amazonaws.com/platform/oci/super-deployer:kaniko-700872863f1e73cd6905d779a3e1b822c1f85616
            stages:
              - pipelinerun
            "${TASKNAME}":
              stage: pipelinerun
              variables:
                BUILD_LIB: "test"
              script:
                - |
                  <<-WORKSPACE cat | tee -a workspace-template.yaml
                  spec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                          storage: 1Gi
                  WORKSPACE
                  TAILLOG="\$(tkn pipeline start promotion-container-build \
                  --serviceaccount "build-bot" \
                  --workspace "name=output,volumeClaimTemplateFile=workspace-template.yaml" \
                  --use-param-defaults \
                  --param CONTEXT="${CONTEXT}" \
                  --param DOCKERFILE="${DOCKERFILE}" \
                  --prefix-name "${TASKNAME}" \
                  -n workflows-platform | tail -1)"
                  \$TAILLOG
                  TASKID=\$(echo "\${TAILLOG}" | awk '{print \$4}')
                  TASKNS=\$(echo "\${TAILLOG}" | awk '{print \$7}')
                  sleep 1
                  export STATUSCODE=\$(tkn pipelinerun describe \${TASKID} -n \${TASKNS} -o yaml | yq e '.status.conditions[0].reason' -)
                  if [[ "\${STATUSCODE}" = "Succeeded" ]] && [[ "\${CLEANUP_PIPELINE_RUN}" = "true" ]]; then
                    echo "y" | tkn pipelinerun delete \${TASKID} -n \${TASKNS}
                    exit 0
                  else
                    exit 1
                  fi
      EOF
      }

      #check for dockerfiles

      if [ -z ${BUILD_IMAGE_PATH} ]; then

        DOCKERFILES="$(find . -name Dockerfile)"
        if [ ! -z "${DOCKERFILES}" ]; then
          for dkr in $(find . -name Dockerfile); do
            CONTEXT=$(echo $dkr | rev | cut -d '/' -f2- | rev)
            DOCKERFILE=$(echo $dkr)
            TASKNAME="$(echo $dkr | rev | cut -d '/' -f2 | rev)"
            genchildpipeline
          done

        else
          echo 'there was no dockerfile found'
          exit 1
        fi

      elif [ ! -z ${BUILD_IMAGE_PATH} ]; then
        CONTEXT="$(echo ${BUILD_IMAGE_PATH} | rev | cut -d '/' -f2- | rev)"
        DOCKERFILE=${BUILD_IMAGE_PATH}
        TASKNAME="$(echo ${BUILD_IMAGE_PATH}| rev | cut -d '/' -f2 | rev)"

      else
        echo 'there was no dockerfile found'
        exit 1
      fi
  artifacts:
    paths:
      - child-pipeline-gitlab-ci.yml

child-image-build:
 stage: pipeline-trigger
 trigger:
   include:
     - artifact: child-pipeline-gitlab-ci.yml
       job: parent-image-build
   strategy: depend
