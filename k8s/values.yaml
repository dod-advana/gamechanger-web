# DEFAULT VALUES

# replicaCount - <Integer >= 1>
#   Number of app pod replicas to launch in the load-balancing group.
#
#   Tips:
#   - when troubleshooting, set to 1 to avoid dealing with complications of load-balanced traffic
replicaCount: 1

# startCommand - <Array of strings>
#   Entrypoint/command to be executed by the main application pod.
#   Will completely override any entrypoint/cmd baked into the container.
#
#   Tips:
#     - when troubleshooting, set to ["sleep", "infinity"] then exec into container and tweak/relaunch app as necessary
startCommand:
  - node
  - index.js

# scripts - <Object>
#   BASH scripts that run during various points in the deployment
scripts:
  # Init Job - job that must run successfully before every application pod is started (e.g. more replicas, more time this runs)
  #     Params:
  #       runInitJob - <bool> - whether the job should run at all
  #       initJobScript - <string> - Inline BASH script
  runInitJob: false
  initJobScript: |
    echo "Hello from Init Script"
    echo "This script must run to completion before EACH application pod starts"
    echo "Can be disabled at will by setting scripts.runInitJob=false"
  # One Time Job - job that runs once for the entire deployment
  #     Params:
  #       runOneTimeJob - <bool> - whether the job should run at all
  #       oneTimeJobScript - <string> - Inline BASH script
  runOneTimeJob: false
  oneTimeJobScript: |
    echo "Hello from one-time Job"
    echo "This job runs every time helm upgrade/install runs, unless explicitly disabled"
    echo "Can be disabled at will by setting scripts.runOneTimeJob=false"

# probes - <Object>
#   Probes for determining pod/container health, as per ...
#   https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
#
#   Tips:
#     - if troubleshooting, set to empty object {}; to avoid k8s restarting container and blocking traffic to it
probes: {}

# podAnnotations - <Object>  additional pod annotations
podAnnotations:
  iam.amazonaws.com/role: advana/k8s/s3.wildcard

# service - <Object/Map>
#   Port details of the service used to open application pod to connections from outside.
#   Note: must be of type NodePort and only http/https keys are supported.
#   For syntax, refer to service.spec.ports[*] definitions of the NodePort service https://kubernetes.io/docs/concepts/services-networking/service/#nodeport
service:
  http:
    port: 80
    # container-side port
    targetPort: 8990
    protocol: TCP
    name: http
  https:
    port: 443
    targetPort: 8443
    protocol: TCP
    name: https

# image - <Object>
#   Main app image details - also used to run all jobs defined in .Values.scripts
image:
  pullPolicy: Always
  tag: "latest"

# nameOverride - <string>
#   Overrides chart name used for purposes of rendering certain templates.
#   Has no effect on helm-provided .Chart.Name variable.
nameOverride: ""
# fullNameOVerride - <string>
#   Overrides the full name of deployment (typically used as unique resource name or prefix for one).
#   Has no effect on helm-provided .Chart.Name variable.
fullnameOverride: ""

# podSecurityContext - <Object>
#   Sets security context for main application and job pods.
#   This primarily comes into play when mounting files and volumes, but has other uses.
#   For more on what goes in here, reference https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
podSecurityContext:
  fsGroup: 1001

# appContainerSecurityContext - <Map>
#   Security context for app and job containers.
#   It's useful to define this to match user-id and group-id of the application and its' files inside container
#   For more on what goes in here, reference https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
appContainerSecurityContext:
  runAsUser: 1001
  runAsGroup: 1001

# serviceAccount - <Map>
#   Config of service account to be used by the app and job pods
#   Service account determines what permissions pods/resources have when they interact with other k8s resources & API's
serviceAccount:
  # create - <bool> - whether to attempt creating the service account
  create: true
  # name - <string> - override with custom name. useful if there is a pre-existing service account you should be using
  name: ""

# @param external DNS subdomain; used to build sub-components FQDNs and configure web CORS (if enabled)
##
externalDomain: "" #"dev.advana.boozallencsn.com"
ingress:
  enabled: true
  ## @param ingress.certManager Set to true to add the `kubernetes.io/tls-acme: "true"` annotation to gamechanger ingresses
  ##
  certManager: true
  ## @param ingress.controller The ingress controller type. Currently supports `default`, `gce` and `ncp`
  ## leave as `default` for most ingress controllers.
  ## set to `gce` if using the GCE ingress controller
  ## set to `ncp` if using the NCP (NSX-T Container Plugin) ingress controller
  ##
  controller: default
  ingressClassName: ""
  web:
    enabled: true
    hostname: gamechanger
    ## @param ingress.web.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param ingress.web.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations:
      ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
    tls: true
    tlsSecretName: "advana.us-wildcard-tls"
    ## @param ingress.web.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.web.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: web.gamechanger.domain
    ##     path: /
    ##
    extraHosts: []
    ## @param ingress.web.secrets Custom TLS certificates as secrets
    ## NOTE: 'key' and 'certificate' are expected in PEM format
    ## NOTE: 'name' should line up with a 'secretName' set further up
    ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
    ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ## e.g:
    ## secrets:
    ##   - name: web.gamechanger.domain-tls
    ##     key: |-
    ##       -----BEGIN RSA PRIVATE KEY-----
    ##       ...
    ##       -----END RSA PRIVATE KEY-----
    ##     certificate: |-
    ##       -----BEGIN CERTIFICATE-----
    ##       ...
    ##       -----END CERTIFICATE-----
    ##
    secrets: []
# resources - <Map>
#   Defines minimum and maximum cpu/memory requirements for each application pod (except one-time-job pods)
#   For more on what goes in here, reference https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources:
  requests:
    memory: "512Mi"
    cpu: "1"

# env - <Map[string, string]>
#   Map of environment variables to be defined for all containers (app & jobs)
#   Keys correspond to env-var names (capitalization is important) and values are interpreted as strings
env: {}

# fileConfig - <Map>
#   Configuration for various text content meant to be exposed inside app containers as files rather than env vars
#   This is useful for secrets and config files that are too long to be used as env vars (e.g. CA certificate bundles)
fileConfig:
  # baseMountPath - <string> - directory where the fileConfig.files will be exposed as actual files
  baseMountPath: "/opt/app-root/src/secrets/"
  # files - <Map[string, string]> - files to be mounted in the baseMountPath. Key corresponds to filename, Value correspond to content.
  files: {}
