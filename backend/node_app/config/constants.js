const path = require('path');
const fs = require('fs');

/**
 * Get cert/key provided env vars
 * @param {string} certEnvVar env var containing entire cert/key
 * @param {string} certFileEnvVar env var containing path to cert/key
 * @returns {string} cert/key contents
 */
const getCert = (certEnvVar, certFileEnvVar) => {
	if (process.env[certEnvVar]) {
		return process.env[certEnvVar].replace(/\\n/g, '\n');
	} else if (process.env[certFileEnvVar]) {
		return fs.readFileSync(process.env[certFileEnvVar], 'ascii');
	} else {
		return '';
	}
};

module.exports = Object.freeze({
	USE_ML_API: process.env.USE_ML_API === 'true',
	VERSION: '#DYNAMIC_VERSION',
	APPROVED_API_CALLERS: process.env.APPROVED_API_CALLERS ? process.env.APPROVED_API_CALLERS.split(' ') : [],
	TLS_CERT: getCert('TLS_CERT', 'TLS_CERT_FILEPATH'),
	TLS_CERT_CA: getCert('TLS_CERT_CA', 'TLS_CERT_CA_FILEPATH'),
	TLS_KEY: getCert('TLS_KEY', 'TLS_KEY_FILEPATH'),
	EXPRESS_TRUST_PROXY: (function () {
		const str_var = process.env.EXPRESS_TRUST_PROXY ? process.env.EXPRESS_TRUST_PROXY.trim() : '';
		if (['true', 'false'].includes(str_var.toLowerCase())) {
			return str_var.toLowerCase() === 'true';
		}
		return str_var;
	})(),
	POSTGRES_CONFIG: {
		databases: {
			game_changer: {
				username: process.env.POSTGRES_USER_GAME_CHANGER,
				password: process.env.POSTGRES_PASSWORD_GAME_CHANGER,
				database: process.env.POSTGRES_DB_GAME_CHANGER?.trim() || 'game_changer',
				data_api_database: process.env.PG_DST_DB?.trim() || 'data_api',
				host: process.env.POSTGRES_HOST_GAME_CHANGER,
				port: 5432,
				dialect: 'postgres',
				logging: false,
			},
			'gc-orchestration': {
				username: process.env.POSTGRES_USER_GC_ORCHESTRATION,
				password: process.env.POSTGRES_PASSWORD_GC_ORCHESTRATION,
				database: process.env.POSTGRES_DB_GC_ORCHESTRATION?.trim() || 'gc-orchestration',
				host: process.env.POSTGRES_HOST_GC_ORCHESTRATION,
				port: 5432,
				dialect: 'postgres',
				logging: false,
			},
			uot: {
				username: process.env.POSTGRES_USER_UOT,
				password: process.env.POSTGRES_PASSWORD_UOT,
				database: process.env.PG_UM_DB?.trim() || 'uot',
				host: process.env.POSTGRES_HOST_UOT,
				port: 5432,
				dialect: 'postgres',
				logging: false,
			},
			eda: {
				username: process.env.POSTGRES_USER_EDA,
				password: process.env.POSTGRES_PASSWORD_EDA,
				database: process.env.POSTGRES_DB_EDA?.trim() || 'eda',
				host: process.env.POSTGRES_HOST_EDA,
				port: 5432,
				dialect: 'postgres',
				logging: false,
			},
			jbook: {
				username: process.env.POSTGRES_USER_JBOOK,
				password: process.env.POSTGRES_PASSWORD_JBOOK,
				database: process.env.POSTGRES_DB_JBOOK?.trim() || 'jbook',
				host: process.env.POSTGRES_HOST_JBOOK,
				port: 5432,
				dialect: 'postgres',
				logging: false,
			},
		},
	},
	GAMECHANGER_BACKEND_BASE_URL: `http://${process.env.GAMECHANGER_BACKEND_HOST}:8990`,
	GAMECHANGER_BACKEND_EDA_URL: `http://${process.env.EDA_DATA_HOST}`,
	EDL_UPLOAD_DIRECTORY: path.dirname(require.main.filename) + '/volumes/uploads/',
	LOG_FILE: path.dirname(require.main.filename) + '/logs/gc-node-api/gc-node-api',
	LOG_FOLDER: path.dirname(require.main.filename) + '/logs/',
	GAME_CHANGER_OPTS: {
		isDemoDeployment: (process.env.GAMECHANGER_DEMO_DEPLOYMENT?.trim() || 'false') === 'true',
		demoUser: process.env.GAMECHANGER_DEMO_USER?.trim() || '007',
		disableStatsAPI: (process.env.GAMECHANGER_DISABLE_STATS_API?.trim() || 'false') === 'true',
		isDecoupled: process.env.IS_DECOUPLED === 'true',
		rootClone: process.env.REACT_APP_ROOT_CLONE,
		version: 'game_changer',
		impalaTable: 'policy_analytics.gc_history',
		protocol: 'http',
		downloadLimit: 5000,
		index: 'gamechanger',
		emailAddress: process.env.EMAIL_ADDRESS,
		cacheReloadUserId: 'gc-auto-cache-reload',
		cacheReloadCronTimingPattern: '0 0 * * *',
		allow_daterange: true,
		historyIndex: process.env.GAMECHANGER_ELASTICSEARCH_HISTORY_INDEX,
		entityIndex: process.env.GAMECHANGER_ELASTICSEARCH_ENTITIES_INDEX,
		textSuggestIndex: process.env.GAMECHANGER_ELASTICSEARCH_SUGGEST_INDEX,
		favoriteSearchPollInterval: process.env.GAMECHANGER_FAVORITE_SEARCH_POLL_INTERVAL,
	},
	GAMECHANGER_ML_API_BASE_URL: `http://${process.env.GAMECHANGER_ML_API_HOST}:5000`,
	GAMECHANGER_ML_API_TRAIN_BASE_URL: `http://${process.env.GAMECHANGER_ML_API_TRAIN_HOST}`,
	ADVANA_EMAIL_CONTACT_NAME: process.env.EMAIL_FROM_NAME || 'Advana Do Not Reply',
	ADVANA_NOREPLY_EMAIL_ADDRESS: process.env.EMAIL_FROM_ADDRESS || 'no-reply@boozallencsn.com',
	ADVANA_EMAIL_TRANSPORT_OPTIONS: {
		host: process.env.EMAIL_HOST,
		port: process.env.EMAIL_PORT,
	},
	ADVANA_EMAIL_CC: process.env.EMAIL_CC || '',
	BASE_URL_FOR_EMAIL: process.env.BASE_URL_FOR_EMAIL || `https://${process.env.REACT_APP_ROOT_CLONE}.advana.data.mil`,
	GAMECHANGER_ELASTIC_SEARCH_OPTS: {
		useElasticSearch: true,
		protocol: process.env.GAMECHANGER_ELASTICSEARCH_PROTOCOL || 'https',
		host: process.env.GAMECHANGER_ELASTICSEARCH_HOST || 'localhost',
		port: process.env.GAMECHANGER_ELASTICSEARCH_PORT || '443',
		user: process.env.GAMECHANGER_ELASTICSEARCH_USER ? process.env.GAMECHANGER_ELASTICSEARCH_USER : '',
		password: process.env.GAMECHANGER_ELASTICSEARCH_PASSWORD || 'passowrd',
		ca: process.env.GAMECHANGER_ELASTICSEARCH_CA
			? process.env.GAMECHANGER_ELASTICSEARCH_CA.replace(/\\n/g, '\n')
			: '',
		index: process.env.GAMECHANGER_ELASTICSEARCH_INDEX || 'gamechanger',
		legislation_index: process.env.GAMECHANGER_LEGISLATION
			? process.env.GAMECHANGER_LEGISLATION
			: 'gamechanger_legislation',
		assist_index: process.env.GAMECHANGER_ASSIST || 'gamechanger_assist',
		history_index: 'search_history',
		requestTimeout: 60000,
	},
	EDA_ELASTIC_SEARCH_OPTS: {
		protocol: process.env.EDA_ELASTICSEARCH_PROTOCOL || 'https',
		host: process.env.EDA_ELASTICSEARCH_HOST || 'loclhost',
		port: process.env.EDA_ELASTICSEARCH_PORT || '443',
		user: process.env.EDA_ELASTICSEARCH_USER ? process.env.EDA_ELASTICSEARCH_USER : '',
		password: process.env.EDA_ELASTICSEARCH_PASSWORD || 'password',
		ca: process.env.EDA_ELASTICSEARCH_CA ? process.env.EDA_ELASTICSEARCH_CA.replace(/\\n/g, '\n') : '',
		index: process.env.EDA_ELASTICSEARCH_INDEX || 'eda',
		filterPicklistIndex: process.env.EDA_ELASTICSEARCH_FILTER_PICKLIST_INDEX || 'gc_eda_picklist',
		extSearchFields: ['*_eda_ext'], //['acomod_eda_ext','product_or_service_line_item_eda_ext'],
		extRetrieveFields: ['*_eda_ext'],
		// index: 'eda'
		requestTimeout: 60000,
	},
	BUDGETSEARCH_ELASTIC_SEARCH_OPTS: {
		index: process.env.BUDGETSEARCH_ELASTICSEARCH_INDEX || 'jbook',
	},
	S3_REGION: process.env.S3_REGION ? process.env.S3_REGION : undefined,
	GRAPH_DB_CONFIG: {
		url: process.env.NEO4J_URL,
		user: process.env.NEO4J_USER,
		password: process.env.NEO4J_PASSWORD,
	},
	MATOMO_DB_CONFIG: {
		host: process.env.MYSQL_HOST_MATOMO,
		user: process.env.MYSQL_USER_MATOMO,
		password: process.env.MYSQL_PASSWORD_MATOMO,
		database: 'matomo',
	},
	HERMES_ELASTIC_SEARCH_OPTS: {
		index: process.env.HERMES_ELASTICSEARCH_INDEX,
		auxSearchFields: [''],
		auxRetrieveFields: [''],
	},
	AMHS_ELASTIC_SEARCH_OPTS: {
		index: process.env.AMHS_ELASTICSEARCH_INDEX,
		auxSearchFields: [''],
		auxRetrieveFields: [''],
	},
	CDO_ELASTIC_SEARCH_OPTS: {
		index: process.env.CDO_ELASTICSEARCH_INDEX,
		auxSearchFields: [''],
		auxRetrieveFields: [''],
	},
	QLIK_OPTS: {
		QLIK_URL: process.env.QLIK_URL,
		QLIK_WS_URL: process.env.QLIK_WS_URL,
		CA: getCert('QLIK_CERT_CA', 'QLIK_CERT_CA_FILEPATH'),
		KEY: getCert('QLIK_CERT_KEY', 'QLIK_CERT_KEY_FILEPATH'),
		CERT: getCert('QLIK_CERT', 'QLIK_CERT_FILEPATH'),
		QLIK_SYS_ACCOUNT: process.env.QLIK_SYS_ACCOUNT,
		AD_DOMAIN: process.env.QLIK_AD_DOMAIN,
		QLIK_EXCLUDE_CUST_PROP_NAME: process.env.QLIK_EXCLUDE_CUST_PROP_NAME || 'appTags',
		QLIK_EXCLUDE_CUST_PROP_VAL: process.env.QLIK_EXCLUDE_CUST_PROP_VAL || 'ExcludeSearch',
		QLIK_BUSINESS_DOMAIN_PROP_NAME: process.env.QLIK_BUSINESS_DOMAIN_PROP_NAME || 'BusinessDomain',
		QLIK_STREAM_FILTER:
			process.env.QLIK_STREAM_FILTER ||
			`customProperties.value eq 'Production' and customProperties.definition.name eq 'StreamType'`,
		QLIK_APP_FILTER:
			process.env.QLIK_APP_FILTER ||
			`stream.customProperties.value eq 'Production' and stream.customProperties.definition.name eq 'StreamType'`,
	},
	DATA_CATALOG_OPTS: {
		port: process.env.DATA_CATALOG_PORT,
		protocol: process.env.DATA_CATALOG_PROTOCOL,
		host: process.env.DATA_CATALOG_HOST,
		core_rest_path: '/rest/2.0',
		username: process.env.DATA_CATALOG_USER,
		password: process.env.DATA_CATALOG_PASSWORD,
		// api_config: dataCatalogConfig,
		ca: process.env.DATA_CATALOG_CA ? process.env.DATA_CATALOG_CA.replace(/\\n/g, '\n') : '',
	},
	TLS_KEY_PASSPHRASE: process.env.TLS_KEY_PASSPHRASE,
	LOG_LEVELS: {
		levels: {
			error: 0,
			warn: 1,
			info: 2,
			metrics: 3,
			boot: 3,
			chunkAssembly: 4,
			chunkPOST: 5,
			unzipping: 6,
			completed: 7,
			chunkGET: 8,
			database: 9,
			http: 9,
			streamOPEN: 10,
			streamCLOSE: 10,
			debug: 11,
		},
		colors: {
			error: 'red',
			warn: 'yellow',
			info: 'cyan',
			metrics: 'blue',
			chunkGET: 'yellow',
			chunkPOST: 'blue',
			chunkAssembly: 'blue',
			unzipping: 'cyan',
			completed: 'green',
			database: 'magenta',
			boot: 'magenta',
			streamOPEN: 'red',
			streamCLOSE: 'red',
			debug: 'red',
		},
	},
	SERVICEDESK_ID: 5,
	SERVICE_ACCOUNT_OPTS: {
		USERNAME: process.env.SERVICE_ACCOUNT_USER,
		PASSWORD: process.env.SERVICE_ACCOUNT_PASSWORD,
		EMAIL: process.env.SERVICE_ACCOUNT_EMAIL,
		PHONE: process.env.SERVICE_ACCOUNT_PHONE,
		ORGANIZATION: process.env.SERVICE_ACCOUNT_ORG,
		ENVIRONMENT: process.env.SERVICE_ACCOUNT_ENV,
	},
	REQUEST_TYPE_ID: 113,
	JIRA_CONFIG: {
		username: process.env.JIRA_USERNAME,
		password: process.env.JIRA_PASSWORD,
		domain: process.env.JIRA_DOMAIN,
		project_key: process.env.JIRA_PROJECT_KEY,
		rating_id: process.env.JIRA_RATING_ID,
		advana_product: process.env.JIRA_ADVANA_PRODUCT,
		feedbackType: process.env.JIRA_FEEDBACK_TYPE,
	},
	GRAPH_CONFIG: {
		PULL_NODES_FROM_NEO4J_MAX_LIMIT: process.env.PULL_NODES_FROM_NEO4J_MAX_LIMIT,
		GRAPH_VIEW_NODES_DISPLAYED_WARNING_LIMIT: process.env.GRAPH_VIEW_NODES_DISPLAYED_WARNING_LIMIT,
		MAX_GRAPH_VIEW_NODES_DISPLAYED: process.env.MAX_GRAPH_VIEW_NODES_DISPLAYED,
	},
	STOP_WORDS: [
		'a',
		'about',
		'above',
		'after',
		'again',
		'against',
		'ain',
		'all',
		'am',
		'an',
		'and',
		'any',
		'are',
		'aren',
		"aren't",
		'as',
		'at',
		'be',
		'because',
		'been',
		'before',
		'being',
		'below',
		'between',
		'both',
		'but',
		'by',
		'can',
		'couldn',
		"couldn't",
		'd',
		'did',
		'didn',
		"didn't",
		'do',
		'does',
		'doesn',
		"doesn't",
		'doing',
		'don',
		"don't",
		'down',
		'during',
		'each',
		'few',
		'for',
		'from',
		'further',
		'had',
		'hadn',
		"hadn't",
		'has',
		'hasn',
		"hasn't",
		'have',
		'haven',
		"haven't",
		'having',
		'he',
		'her',
		'here',
		'hers',
		'herself',
		'him',
		'himself',
		'his',
		'how',
		'i',
		'if',
		'in',
		'into',
		'is',
		'isn',
		"isn't",
		'it',
		"it's",
		'its',
		'itself',
		'just',
		'll',
		'm',
		'ma',
		'me',
		'mightn',
		"mightn't",
		'more',
		'most',
		'mustn',
		"mustn't",
		'my',
		'myself',
		'needn',
		"needn't",
		'no',
		'nor',
		'not',
		'now',
		'o',
		'of',
		'off',
		'on',
		'once',
		'only',
		'or',
		'other',
		'our',
		'ours',
		'ourselves',
		'out',
		'over',
		'own',
		're',
		's',
		'same',
		'shan',
		"shan't",
		'she',
		"she's",
		'should',
		"should've",
		'shouldn',
		"shouldn't",
		'so',
		'some',
		'such',
		't',
		'than',
		'that',
		"that'll",
		'the',
		'their',
		'theirs',
		'them',
		'themselves',
		'then',
		'there',
		'these',
		'they',
		'this',
		'those',
		'through',
		'to',
		'too',
		'under',
		'until',
		'up',
		've',
		'very',
		'was',
		'wasn',
		"wasn't",
		'we',
		'were',
		'weren',
		"weren't",
		'what',
		'when',
		'where',
		'which',
		'while',
		'who',
		'whom',
		'why',
		'will',
		'with',
		'won',
		"won't",
		'wouldn',
		"wouldn't",
		'y',
		'you',
		"you'd",
		"you'll",
		"you're",
		"you've",
		'your',
		'yours',
		'yourself',
		'yourselves',
		'could',
		"he'd",
		"he'll",
		"he's",
		"here's",
		"how's",
		"i'd",
		"i'll",
		"i'm",
		"i've",
		"let's",
		'ought',
		"she'd",
		"she'll",
		"that's",
		"there's",
		"they'd",
		"they'll",
		"they're",
		"they've",
		"we'd",
		"we'll",
		"we're",
		"we've",
		"what's",
		"when's",
		"where's",
		"who's",
		"why's",
		'would',
	],
	REDIS_CONFIG: {
		GLOBAL_SEARCH_CACHE_DB: 10,
	},
	GLOBAL_SEARCH_OPTS: {
		FULL_APPS_POLL_INTERVAL: process.env.QLIK_APP_FULL_LIST_POLL_INTERVAL,
		COLLIBRA_CACHE_POLL_INTERVAL: process.env.COLLIBRA_CACHE_POLL_INTERVAL,
		ES_MAPPING: {
			settings: {
				analysis: {
					filter: {
						english_stemmer: {
							type: 'stemmer',
							language: 'english',
						},
						english_possessive_stemmer: {
							type: 'stemmer',
							language: 'possessive_english',
						},
					},
					normalizer: {
						lowercase_normalizer: {
							filter: ['lowercase'],
							type: 'custom',
							char_filter: [],
						},
					},
					analyzer: {
						my_analyzer: {
							type: 'custom',
							tokenizer: 'standard',
							filter: ['english_possessive_stemmer', 'lowercase', 'english_stemmer'],
						},
					},
				},
			},
			mappings: {
				dynamic_templates: [
					{
						string: {
							match: '*_s',
							mapping: {
								type: 'keyword',
								ignore_above: 256,
							},
						},
					},
					{
						text: {
							match: '*_t',
							mapping: { type: 'text', analyzer: 'my_analyzer' },
						},
					},
					{
						string_and_text: {
							match: '*_ks',
							mapping: {
								type: 'keyword',
								ignore_above: 256,
								fields: {
									search: { type: 'text', analyzer: 'my_analyzer' },
								},
							},
						},
					},
					{
						integer: {
							match: '*_i',
							mapping: { type: 'integer' },
						},
					},
					{
						integer: {
							match: '*_l',
							mapping: { type: 'long' },
						},
					},
					{
						boolean: {
							match: '*_b',
							mapping: { type: 'boolean' },
						},
					},
					{
						double: {
							match: '*_d',
							mapping: { type: 'double' },
						},
					},
					{
						float: {
							match: '*_f',
							mapping: { type: 'float' },
						},
					},
					{
						date: {
							match: '*_dt',
							mapping: { type: 'date', format: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" },
						},
					},
					{
						date_year_only: {
							match: '*_year_only',
							mapping: { type: 'date', format: 'yyyy' },
						},
					},
					{
						date_year_month_only: {
							match: '*_year_month_only',
							mapping: { type: 'date', format: 'yyyy-MM' },
						},
					},
					{
						rank_feature: {
							match: '*_r',
							mapping: { type: 'rank_feature' },
						},
					},
					{
						rank_features: {
							match: '*_rs',
							mapping: { type: 'rank_features' },
						},
					},
					{
						nested_object: {
							match: '*_n',
							mapping: { type: 'nested' },
						},
					},
				],
			},
		},
		ES_INDEX: process.env.GLOBAL_SEARCH_ELASTICSEARCH_INDEX || 'global_search_qlik',
	},
});
